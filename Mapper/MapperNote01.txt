Mapper
	作用
		替我们生成常用增删改查操作的SQL语句
	官网
		https://gitee.com/free
		https://gitee.com/free/Mapper/wikis/1.1-java?parent=1.integration
		
	通用mapper 支持驼峰命名
		
第一个Mapper工程
	1. 新建数据表 employee
	2. 新建类 Employee
	3. 搭建mybatis + spring
		需要依赖 mybatis-spring  mapper 的jar 包 还有其他mybatis  spring ...
		
	通用Mapper可以省略 mapper.xml
		Mapper 需要 extends Mapper<Emplyee>
		
	Service 装配 mapper
	@Service
	public class EmployeeService {
		@Autowried
		private EmployeeMapper employeeMapper;
	}
	

	解释Mapper
		继承了BaseMapper
			ExampleMapper
			RowBoundsMapper
				又继承了一些子接口
				
			所以一些方法不用写了
		
	右键相应EmployeeMapper new junit test x 自动生成测试类
	在测试类中引用 
		private ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-context.xml");
		private EmployeeService employeeService = ctx.getBean(EmployeeService.class);
		
	测试 testSelectOne
	
	
注解
	@Table
	作用：建立实体类和数据表之间的对应关系
	默认规则：实体类名首字母小写作为表名
	
	@Table(name = "employees")
	public class Employee{}
	
	@Column
	作用：建立实体类字段和数据库表字段之间的对应关系
	默认规则：
		实体类字段：驼峰命名法
		数据库表字段：使用"_"区分各个单词
	用法：
		@Column(name = "emp_salary")
		private Double empSalary;
		
	@Id
	通用Mapper 在执行 xxxByPrimaryKey(key) 方法时，有两种情况
	情况1：没有使用@Id 注解明确指定主键字段
		SELECT emp_id,emp_salary,emp_age,emp_name FROM employees 
			WHERE emp_id = ? AND emp_salary = ? AND emp_age = ? 
			AND emp_name = ?   
	情况2：使用@Id 主键明确标记和数据库表中主键字段对应的实体类字段
		 SELECT emp_id,emp_salary,emp_age,emp_name FROM employees 
			WHERE emp_id = ?  
		
	@GeneratedValue （看课件）
	
	@Transient
		（用于忽略某字段）
		实体类某字段不存在与数据表时使用
		
QBC查询
	Query By Criteria（查询条件）
	
	//目标：WHERE (emp_salary>? AND emp_age<?)OR (emp_salary<? AND emp_age>?)
		
	设置排序信息
	example.orderBy("empSalary").asc().orderBy("empAge").desc();
	
	设置“去重”
	example.setDistinct(true)
	
	设置select 字段
	example.selectProperties("empName", "empSalary");



 Example example = new Example(Brand.class);
                Example.Criteria createCriteria1 = example.createCriteria();
                createCriteria1.andEqualTo("name", name);
                List<Brand> brands2= brandMapper.selectByExample(example);
                System.out.println(brands2);
                if(brands2.size() > 0){
                    return brands2.get(0);
                }


		
		
常用方法
public class EmployeeMapperTest {
	
	private ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-context.xml");
	private EmployeeService employeeService = ctx.getBean(EmployeeService.class);

	@Test
	public void testSelectOne() {
		Employee emp = new Employee(null, null, null, "tom");
		Employee selectOne = employeeService.selectOne(emp );
		//SELECT emp_id,emp_salary,emp_age,emp_name FROM employees WHERE emp_name = ? 
		System.out.println(selectOne);
	}

	@Test
	public void testSelect() {
		fail("Not yet implemented");
	}

	@Test
	public void testSelectAll() {
		fail("Not yet implemented");
	}

	@Test
	public void testSelectCount() {
		fail("Not yet implemented");
	}

	@Test
	public void testSelectByPrimaryKey() {
		//需要使用@Id 标注主键
		Integer id = 1;
		Employee selectByPrimaryKey = employeeService.selectByPrimaryKey(id);
		System.out.println(selectByPrimaryKey);
	}

	@Test
	public void testExistsWithPrimaryKey() {
		fail("Not yet implemented");
	}

	@Test
	public void testInsert() {
		Employee employee = new Employee(null, 1288.00, 23, "tan");
		Integer insert = employeeService.insert(employee);
		System.out.println(insert);
	}

	@Test
	public void testInsertSelective() {
		//除了 id 外，为null 的字段不做插入
		//适合字段很多，但真正插入的数据少的时候
		Employee employee = new Employee(null, null, 22, "huihua");
		Integer insertSelective = employeeService.insertSelective(employee);
		// INSERT INTO employees ( emp_age,emp_name ) VALUES( ?,? )   
		System.out.println(insertSelective);
	}

	@Test
	public void testUpdateByPrimaryKey() {
		
		Employee employee = new Employee(1, null, 23, null);
		Integer updateByPrimaryKey = employeeService.updateByPrimaryKey(employee);
		//UPDATE employees SET emp_salary = ?,emp_age = ?,emp_name = ? WHERE emp_id = ?   
		//全部字段都更新
		
		System.out.println(updateByPrimaryKey);
	}

	@Test
	public void testUpdateByPrimaryKeySelective() {
		Employee employee = new Employee(2, null, 25, null);
		Integer updateByPrimaryKeySelective = employeeService.updateByPrimaryKeySelective(employee);
		//UPDATE employees SET emp_age = ? WHERE emp_id = ?   
		//为null的字段不做更新
		
		System.out.println(updateByPrimaryKeySelective);
	}

	@Test
	public void testDelete() {
		Employee employee = new Employee(null, null, 23, null);
		Integer delete = employeeService.delete(employee);
		//DELETE FROM employees WHERE emp_age = ? 
		//根据不为null的部分进行匹配删除
		System.out.println(delete);
	}

	@Test
	public void testDeleteByPrimaryKey() {
		int id = 1;
		Integer deleteByPrimaryKey = employeeService.deleteByPrimaryKey(id);
		//DELETE FROM employees WHERE emp_id = ? 
		//根据id进行删除
		System.out.println(deleteByPrimaryKey);
	}

	@Test
	public void testSelectByExample() {
		//目标：WHERE (emp_salary>? AND emp_age<?)OR (emp_salary<? AND emp_age>?)
		//1. 创建example 对象
		Example example = new Example(Employee.class);
		
		/********************/
		//设置排序信息
		example.orderBy("empSalary").asc().orderBy("empAge").desc();
		
		//设置“去重”
		example.setDistinct(true);
		
		//设置select 字段 (只返回需要的地段)
		example.selectProperties("empName", "empSalary");
		/********************/
		
		//2. 创建criteria 对象
		Criteria createCriteria1 = example.createCriteria();
		Criteria createCriteria2 = example.createCriteria();
		
		//3. 利用criteria对象，设置查询条件
		createCriteria1.andGreaterThan("empSalary", 3000)
			.andLessThan("empAge", 28);
		createCriteria2.andGreaterThan("empAge", 34)
			.andLessThan("empSalary", 6000);
		
		//4. 使用example 将两个 criteria 对象连接
		example.or(createCriteria2);
		
		//5. 调用查询方法
		List<Employee> selectByExample = employeeService.selectByExample(example);
		//SELECT emp_id,emp_salary,emp_age,emp_name FROM employees 
		//WHERE ( ( emp_salary > ? and emp_age < ? ) or ( emp_age > ? and emp_salary < ? ) )
		
		for (Employee employee : selectByExample) {
			System.out.println(employee);
		}
	}

	@Test
	public void testSelectOneByExample() {
		fail("Not yet implemented");
	}

	@Test
	public void testSelectCountByExample() {
		fail("Not yet implemented");
	}

	@Test
	public void testDeleteByExample() {
		fail("Not yet implemented");
	}

	@Test
	public void testUpdateByExample() {
		fail("Not yet implemented");
	}

	@Test
	public void testUpdateByExampleSelective() {
		fail("Not yet implemented");
	}

	@Test
	public void testSelectByExampleAndRowBounds() {
		fail("Not yet implemented");
	}

	@Test
	public void testSelectByRowBounds() {
		fail("Not yet implemented");
	}

}
	

逆向工程
	参考文档：https://github.com/abel533/Mapper/wiki/4.1.mappergenerator
	
	1.创建maven 工程
	
	2. 配置 pom.xml 文件
	配不配都行
		<properties>
			<!-- ${basedir}引用工程根目录 -->
			<!-- targetJavaProject：声明存放源码的目录位置 -->
			<targetJavaProject>${basedir}/src/main/java</targetJavaProject>

			<!-- targetMapperPackage：声明MBG生成XxxMapper接口后存放的package位置 -->
			<targetMapperPackage>com.atguigu.shop.mappers</targetMapperPackage>

			<!-- targetModelPackage：声明MBG生成实体类后存放的package位置 -->
			<targetModelPackage>com.atguigu.shop.entities</targetModelPackage>

			<!-- targetResourcesProject：声明存放资源文件和XML配置文件的目录位置 -->
			<targetResourcesProject>${basedir}/src/main/resources</targetResourcesProject>

			<!-- targetXMLPackage：声明存放具体XxxMapper.xml文件的目录位置 -->
			<targetXMLPackage>mappers</targetXMLPackage>

			<!-- 通用Mapper的版本号 -->
			<mapper.version>4.0.0-beta3</mapper.version>

			<!-- MySQL驱动版本号 -->
			<mysql.version>5.1.37</mysql.version>
		</properties>
		
		<dependences>
			...
		</dependences>
	
		<build>
			<plugins>
				<plugin>
					<groupId>org.mybatis.generator</groupId>
					<artifactId>mybatis-generator-maven-plugin</artifactId>
					<version>1.3.2</version>

					<!-- 配置generatorConfig.xml配置文件的路径 -->
					<configuration>
						<configurationFile>${basedir}/src/main/resources/generator/generatorConfig.xml</configurationFile>
						<overwrite>true</overwrite>
						<verbose>true</verbose>
					</configuration>

					<!-- MBG插件的依赖信息 -->
					<dependencies>
						<dependency>
							<groupId>mysql</groupId>
							<artifactId>mysql-connector-java</artifactId>
							<version>${mysql.version}</version>
						</dependency>
						<dependency>
							<groupId>tk.mybatis</groupId>
							<artifactId>mapper</artifactId>
							<version>${mapper.version}</version>
						</dependency>
					</dependencies>
				</plugin>
			</plugins>
		</build>
		
		
	3. 新建 generatorConfig.xml 和 config.properties
	config.properties
		# Database connection information
		jdbc.driverClass = com.mysql.jdbc.Driver
		jdbc.url = jdbc:mysql://localhost:3306/common_mapper
		jdbc.user = root
		jdbc.password = root

		#c3p0
		jdbc.maxPoolSize=50
		jdbc.minPoolSize=10
		jdbc.maxStatements=100
		jdbc.testConnection=true

		# mapper
		mapper.plugin = tk.mybatis.mapper.generator.MapperPlugin
		mapper.Mapper = tk.mybatis.mapper.common.Mapper
	
	generatorConfig.xml
		<?xml version="1.0" encoding="UTF-8"?>
		<!DOCTYPE generatorConfiguration
				PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
				"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

		<generatorConfiguration>
			<!-- 引入外部属性文件 -->
			<properties resource="config.properties" />

			<context id="Mysql" targetRuntime="MyBatis3Simple"
				defaultModelType="flat">
				<property name="beginningDelimiter" value="`" />
				<property name="endingDelimiter" value="`" />

				<!-- 配置通用Mapper的MBG插件相关信息 -->
				<plugin type="${mapper.plugin}">
					<property name="mappers" value="${mapper.Mapper}" />
				</plugin>

				<!-- 配置连接数据库的基本信息 -->
				<jdbcConnection 
					driverClass="${jdbc.driverClass}"
					connectionURL="${jdbc.url}" 
					userId="${jdbc.user}" 
					password="${jdbc.password}">
				</jdbcConnection>
			
				<!-- 配置Java实体类存放位置 -->
				<javaModelGenerator 
					targetPackage="${targetModelPackage}"
					targetProject="${targetJavaProject}" />

				<!-- 配置XxxMapper.xml存放位置 -->
				<sqlMapGenerator 
					targetPackage="${targetXMLPackage}"
					targetProject="${targetResourcesProject}" />

				<!-- 配置XxxMapper.java存放位置 -->
				<javaClientGenerator 
					targetPackage="${targetMapperPackage}"
					targetProject="${targetJavaProject}" 
					type="XMLMAPPER" />

				<!-- 根据数据库表生成Java文件的相关规则 -->
				<!-- tableName="%"表示数据库中所有表都参与逆向工程，此时使用默认规则 -->
				<!-- 默认规则：table_dept→TableDept -->
				<!-- 不符合默认规则时需要使用tableName和domainObjectName两个属性明确指定 -->
				<table tableName="tabple_emp" domainObjectName="Employee">
					<!-- 配置主键生成策略 -->
					<generatedKey column="emp_id" sqlStatement="Mysql" identity="true" />
				</table>
			</context>
		</generatorConfiguration>
	
	4. 执行生成文件
	右键 pom.xml -> run as -> (第二个)Maven build... 
		-> Goals: mybatis-generator:generate -> run
		
		
	5. 导入依赖（可以先导入，在执行pom.xml文件）	
	pom.xml
		<dependencies>
			<dependency>
					<groupId>junit</groupId>
					<artifactId>junit</artifactId>
					<version>4.9</version>
				</dependency>
			  <dependency>
						<groupId>tk.mybatis</groupId>
						<artifactId>mapper</artifactId>
						<version>4.1.5</version>
					</dependency>
					<dependency>
					<groupId>org.mybatis</groupId>
					<artifactId>mybatis</artifactId>
					<version>3.5.2</version>
				</dependency>
			<dependency>
					<groupId>mysql</groupId>
					<artifactId>mysql-connector-java</artifactId>
					<version>5.1.37</version>
				</dependency>
		  </dependencies>
		
	6.测试
	a.新建mybatis-config.xml
		<?xml version="1.0" encoding="UTF-8"?>
		<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">
		<configuration>

			<!-- 引入外部属性文件 -->
			<properties resource="jdbc.properties"/>
			
			<!-- 配置MyBatis运行环境 -->
			<environments default="development">
				<!-- 配置专门用于开发过程的运行环境 -->
				<environment id="development">
					<!-- 配置事务管理器 -->
					<transactionManager type="JDBC"/>
					<!-- 配置数据源 -->
					<dataSource type="POOLED">
						<property name="username" value="${jdbc.user}"/>
						<property name="password" value="${jdbc.password}"/>
						<property name="driver" value="${jdbc.driver}"/>
						<property name="url" value="${jdbc.url}"/>
					</dataSource>
				</environment>
			</environments>
			
			<mappers>
				<package name="com.atguigu.shop.mappers"/>
			</mappers>

		</configuration>
		
	b. 新建 jdbc.properties
		jdbc.user=root
		jdbc.password=1275485428
		jdbc.url=jdbc:mysql://localhost:3307/common_mapper?useUnicode=true&characterEncoding=utf8
		jdbc.driver=com.mysql.jdbc.Driver
	
	
	c. 编写测试类
		public static void main(String[] args) {
		
			SqlSessionFactoryBuilder builder = new SqlSessionFactoryBuilder();
			
			InputStream inputStream = MBGTest.class.getClassLoader().getResourceAsStream("mybatis-config.xml");
			
			SqlSessionFactory factory = builder.build(inputStream);
			
			SqlSession session = factory.openSession();
			
			//***********************
			//按照Java方式整合通用Mapper的特殊设置
			//i.创建MapperHelper对象
			MapperHelper mapperHelper = new MapperHelper();
			
			//ii.通过MapperHelper对象对MyBatis原生的Configuration对象进行处理
			Configuration configuration = session.getConfiguration();
			mapperHelper.processConfiguration(configuration);
			
			//***********************
			
			EmployeeMapper mapper = session.getMapper(EmployeeMapper.class);
			
			Iterator<Employee> iterator = mapper.selectAll().iterator();
			
			while (iterator.hasNext()) {
				Employee employee = (Employee) iterator.next();
				System.out.println(employee);
			}
			
		}
		

	
		
		
		
		
		
		
		
		
		