注意：
要将 anon 和 授权 （perms，role）的过滤设置放在 authc 拦截所有的面前，不然直接被拦截

//无需拦截
        filterMap.put("/hello", "anon");
        filterMap.put("/login", "anon");

        //授权过滤器
        filterMap.put("/add", "perms[user:add]");

        filterMap.put("/*", "authc");


 /*
 	* 创建 ShiroFilterFactoryBean
 	*/
    @Bean
    public ShiroFilterFactoryBean getShiroFilterFactoryBean(@Qualifier("securityManager")DefaultWebSecurityManager securityManager){
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();

        //设置安全管理器
        shiroFilterFactoryBean.setSecurityManager(securityManager);

        //添加 Shiro 内置过滤器
        /**
         * Shiro内置过滤器，可以实现权限相关的拦截器
         * 	常用的过滤器：
         *		anon：无需认证（登录）可以访问
         *		authc：必须认证才可以访问
         *		user：如果使用rememberMe 的功能可以直接访问
         * 		perms： 该资源必须得到资源权限才可以访问
         *		role：该资源必须得到角色权限才可以访问
         */
        Map<String,String> filterMap = new LinkedHashMap<String,String>();
//        filterMap.put("/add", "authc");
//        filterMap.put("/update", "authc");

        //无需拦截
        filterMap.put("/hello", "anon");
        filterMap.put("/login", "anon");

        //授权过滤器
        filterMap.put("/add", "perms[user:add]");

        filterMap.put("/*", "authc");



        //修改调整的登录页面 -- 拦截后跳转
        shiroFilterFactoryBean.setLoginUrl("/toLogin");
        //设置未授权跳转页面
        shiroFilterFactoryBean.setUnauthorizedUrl("/unAuth");

        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterMap);

        return shiroFilterFactoryBean;
    }