前端：先导入 ztree 的css 和js 还有jquery 

<ul id="treeDemo" class="ztree"></ul>

var setting = {	
            		//异步获取数据，此时返回的数据格式应该是下列 zNodes 的格式
            		async: {
            			enable: true,
            			url: "${APP_PATH}/permission/loadData",
            			autoParam: ["id", "name=n", "level=lv"],
            			type: "post"
            		},
					view: {
						selectedMulti: false,
						addDiyDom: function(treeId, treeNode){
							var icoObj = $("#" + treeNode.tId + "_ico"); // tId = permissionTree_1, $("#permissionTree_1_ico")
							if ( treeNode.icon ) {
								icoObj.removeClass("button ico_docu ico_open").addClass(treeNode.icon).css("background","");
							}
                            
						},
						addHoverDom: function(treeId, treeNode){  
                        //   <a><span></span></a>
							var aObj = $("#" + treeNode.tId + "_a"); // tId = permissionTree_1, ==> $("#permissionTree_1_a")
							aObj.attr("href", "javascript:;");
							if (treeNode.editNameFlag || $("#btnGroup"+treeNode.tId).length>0) return;
							var s = '<span id="btnGroup'+treeNode.tId+'">';
							if ( treeNode.level == 0 ) {
								s += '<a class="btn btn-info dropdown-toggle btn-xs" style="margin-left:10px;padding-top:0px;" onclick="addNode('+treeNode.id+')" href="#" >&nbsp;&nbsp;<i class="fa fa-fw fa-plus rbg "></i></a>';
							} else if ( treeNode.level == 1 ) {
								s += '<a class="btn btn-info dropdown-toggle btn-xs" style="margin-left:10px;padding-top:0px;"  onclick="editNode('+treeNode.id+')" href="#" title="修改权限信息">&nbsp;&nbsp;<i class="fa fa-fw fa-edit rbg "></i></a>';
								if (treeNode.children.length == 0) {
									s += '<a class="btn btn-info dropdown-toggle btn-xs" style="margin-left:10px;padding-top:0px;" onclick="deleteNode('+treeNode.id+')" href="#" >&nbsp;&nbsp;<i class="fa fa-fw fa-times rbg "></i></a>';
								}
								s += '<a class="btn btn-info dropdown-toggle btn-xs" style="margin-left:10px;padding-top:0px;" onclick="addNode('+treeNode.id+')" href="#" >&nbsp;&nbsp;<i class="fa fa-fw fa-plus rbg "></i></a>';
							} else if ( treeNode.level == 2 ) {
								s += '<a class="btn btn-info dropdown-toggle btn-xs" style="margin-left:10px;padding-top:0px;"  onclick="editNode('+treeNode.id+')" href="#" title="修改权限信息">&nbsp;&nbsp;<i class="fa fa-fw fa-edit rbg "></i></a>';
								s += '<a class="btn btn-info dropdown-toggle btn-xs" style="margin-left:10px;padding-top:0px;" onclick="deleteNode('+treeNode.id+')" href="#">&nbsp;&nbsp;<i class="fa fa-fw fa-times rbg "></i></a>';
							}
			
							s += '</span>';
							aObj.after(s);
						},
						removeHoverDom: function(treeId, treeNode){
							$("#btnGroup"+treeNode.tId).remove();
						}
					}
            };

            /*
    		var zNodes =[
    			{ name:"父节点1 - 展开", open:true,
    				children: [
    					{ name:"父节点11 - 折叠",
    						children: [
    							{ name:"叶子节点111"},
    							{ name:"叶子节点112"},
    							{ name:"叶子节点113"},
    							{ name:"叶子节点114"}
    						]},
    					{ name:"父节点12 - 折叠",
    						children: [
    							{ name:"叶子节点121"},
    							{ name:"叶子节点122"},
    							{ name:"叶子节点123"},
    							{ name:"叶子节点124"}
    						]},
    					{ name:"父节点13 - 没有子节点", isParent:true}
    				]},
    			{ name:"父节点2 - 折叠",
    				children: [
    					{ name:"父节点21 - 展开", open:true,
    						children: [
    							{ name:"叶子节点211"},
    							{ name:"叶子节点212"},
    							{ name:"叶子节点213"},
    							{ name:"叶子节点214"}
    						]},
    					{ name:"父节点22 - 折叠",
    						children: [
    							{ name:"叶子节点221"},
    							{ name:"叶子节点222"},
    							{ name:"叶子节点223"},
    							{ name:"叶子节点224"}
    						]},
    					{ name:"父节点23 - 折叠",
    						children: [
    							{ name:"叶子节点231"},
    							{ name:"叶子节点232"},
    							{ name:"叶子节点233"},
    							{ name:"叶子节点234"}
    						]}
    				]},
    			{ name:"父节点3 - 没有子节点", isParent:true}

    		];
            */
            $(document).ready(function(){
    			//$.fn.zTree.init($("#treeDemo"), setting, zNodes);
    			//异步获取数据
            	$.fn.zTree.init($("#treeDemo"), setting);
    		});

后台：
public class Permission {

	private Integer id;
	private String name;
	private String url;
	private Integer pid;
	private Boolean open;
	private List<Permission> children = new ArrayList();
	xxx
}

Service  dao
queryAll()


@ResponseBody
	@RequestMapping(value = "/loadData", method = RequestMethod.POST)
	public Object loadData() {
		List<Permission> permissions = new ArrayList();
		
		List<Permission> nodes = permissionService.queryAll();
		
//		//这种方法效率比递归高
//		for(Permission p : nodes) {
//			if(p.getPid() == null) {
//				permissions.add(p);
//			}else {
//				for(Permission p2 : nodes) {//找到父元素，再由父元素添加该元素
//					if(p.getPid() == p2.getId()) {
//						p2.getChildren().add(p);
//						break;
//					}
//				}
//			}
//		}

		
		//效率更高
		Map<Integer, Permission> maps = new HashMap<Integer, Permission>();
		
		for (Permission p : nodes) {
			maps.put(p.getId(), p);
		}
		for(Permission p : nodes) {
			if(p.getPid() == null) {
				permissions.add(p);
			}else {
				maps.get(p.getPid()).getChildren().add(p);
			}
		}
		
		return permissions;
	}


