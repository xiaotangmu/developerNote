来源：https://www.cnblogs.com/lenve/p/10748453.html

@ControllerAdvice 三个方面功能 

    1.  全局异常处理
    2.  全局数据绑定
    3.  全局数据预处理



 1.  全局异常处理
例子 -- 与shiro 一同使用，拦截无权报错
//@ExceptionHandler 注解用来指明异常的处理类型

@ControllerAdvice
public class NoPermissionException {
    @ResponseBody
    @ExceptionHandler(UnauthorizedException.class) 
    public String handleShiroException(HttpServletRequest req, Exception ex) {//参数自己定
        JSONObject json = new JSONObject();
        json.put("msg","权限不足");
        return json.toString();
    }
    @ResponseBody
    @ExceptionHandler(AuthorizationException.class)
    public String AuthorizationException(HttpServletRequest req,Exception ex) {
        JSONObject json = new JSONObject();
        json.put("msg","权限认证失败");
        return json.toString();
    }

    @ResponseBody
    @ExceptionHandler(Exception.class)
    public Object AuthorizationException(HttpServletRequest req,Exception ex) {
        return Msg.failError("exception");
    }

}

问题：定义有Exception 异常父类，当出现(AuthorizationException.class) 异常时，会调用哪个方法？
	会调用 (AuthorizationException.class) 定义方法，（先调用准确的，与声明顺序无关）



2. 全局数据绑定
解析：
通过全局绑定，可以让全局数据再每一个 Controller 的接口中，都能够访问得到
@ModelAttribute 注解的 name 属性去重新指定 key，返回值为key value

例子

@ControllerAdvice
public class MyGlobalExceptionHandler {		//定义全局数据
    @ModelAttribute(name = "md")
    public Map<String,Object> mydata() {
        HashMap<String, Object> map = new HashMap<>();
        map.put("age", 99);
        map.put("gender", "男");
        return map;
    }
}

//controller 接口中获取全局数据
@GetMapping("/hello")
    public String hello(Model model) {
        Map<String, Object> map = model.asMap();
        System.out.println(map);
        return "hello controller advice";
    }


3. 全局数据预处理
应用场景 -- 两个实体类都有一个 name 属性，从前端传递时 ，无法区分。
	此时，通过 @ControllerAdvice 的全局数据预处理可以解决这个问题

解决步骤如下:

1.给接口中的变量取别名

@PostMapping("/book")
public void addBook(@ModelAttribute("b") Book book, @ModelAttribute("a") Author author) {
    System.out.println(book);
    System.out.println(author);
}

2.进行请求数据预处理
在 @ControllerAdvice 标记的类中添加如下代码:

@InitBinder("b")
public void b(WebDataBinder binder) {
    binder.setFieldDefaultPrefix("b.");
}
@InitBinder("a")
public void a(WebDataBinder binder) {
    binder.setFieldDefaultPrefix("a.");
}

@InitBinder("b") 注解表示该方法用来处理和Book和相关的参数,在方法中,给参数添加一个 b 前缀,即请求参数要有b前缀.

3.发送请求

请求发送时,通过给不同对象的参数添加不同的前缀,可以实现参数的区分.