https://baike.baidu.com/item/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/4940767?fr=aladdin

想办法让各个server的共用一个sessionId

server端
以server群如何生成、验证ID的方式大致分为两种：

    “共享Cookie”这个就是上面提到的共享session的方式，我倒觉得叫“共享session”来得好一点，
本质上cookie只是存储session-id的介质，session-id也可以放在每一次请求的url里。据说这种方式不安全，
我没去细究，哪位大神可以推荐下相关的资料，我后期补上。其实也是，毕竟session这项机制一开始就是
一个server一个session的，把session拿出来让所有server共享确实有点奇怪。
    SSO-Token方式因为共享session的方式不安全，所以我们不再以session-id作为身份的标识。
我们另外生成一种标识，把它取名SSO-Token(或Ticket)，这种标识是整个server群唯一的，并且所有server群
都能验证这个token，同时能拿到token背后代表的用户的信息。


浏览器端  -- 有跨域问题 -- 记录ID的cookie又是不能跨域的

    单点登录还有非常关键的一步，这一步跟server端验证token的方式无关，用最早的“共享session”的方式还是
现在的“token”方式，身份标识到了浏览器端都要面临这样的一个问题：用户登录成功拿到token(或者是session-id)
后怎么让浏览器存储和分享到其它域名下？同域名很简单，把token存在cookie里，把cookie的路径设置成顶级域名下，
这样所有子域都能读取cookie中的token。这就是共享cookie的方式（这才叫共享Cookie嘛，
上面那个应该叫共享session）。比如：谷歌公司，google.com是他的顶级域名，邮箱服务的mail.google.com和地图
服务的map.google.com都是它的子域。但是，跨域的时候怎么办？谷歌公司还有一个域名，youtube.com，提供视频
服务 [2]  。

技术实现机制

当用户第一次访问应用系统的时候，因为还没有登录，会被引导到认证系统中进行登录；
根据用户提供的登录信息，认证系统进行身份校验，如果通过校验，应该返回给用户一个认证的凭据－－ticket；
用户再访问别的应用的时候，就会将这个ticket带上，作为自己认证的凭据，应用系统接受到请求之后会把ticket
送到认证系统进行校验，检查ticket的合法性。如果通过校验，用户就可以在不用再次登录的情况下访问应用系统2
和应用系统3了。