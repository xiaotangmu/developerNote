官方文档：https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/websockets?view=aspnetcore-3.0

参考：
https://www.cnblogs.com/cgyqu/p/9563193.html
总结：使用Group 发送信息

参考：https://blog.csdn.net/qq_26900081/article/details/90296333
.NetCode 2.0 APi 参考：https://www.cnblogs.com/webenh/p/7897195.html

前端：
npm init -y
npm install @aspnet/signalr
import * as signalR from "@aspnet/signalr";

发送对象总结：
await Clients.All.SendAsync("ReceiveMessage", user, message);		// All: 全部客户
await Clients.Caller.SendAsync("ReceiveCaller", message);		// Caller: 发送给请求客户（自己）
							// Group 发送组
await Groups.AddToGroupAsync(Context.ConnectionId, groupName);	// 加入组
await Clients.Group(groupName).SendAsync("ReceiveMessage", $"{Context.ConnectionId} joined {groupName}");

注意sevices 先配置signalr 再配置跨域
一、SignalR
1. 创建空项目
2. 添加SignalR Hub Class 类

public class MsgHub: Hub
{
	// 在 hub 中编写的方法，都是要被客户端调用的方法
	public void Hello()
	{
		// 服务器主动调用客户端的方法
		Clients.All.hello();
	}
}


3. 创建Startup.cs
public class Startup
{
	public void Configuration(IAppBuilder app)
	{
		// 
		app.MapSignalR();
	}
}

运行 测试 路径/signalr/hubs
查看是否有数据产生



发送信息样式：
 public class ReliableChatRoom : Hub
    {
        public void BroadcastMessage(string name, string message)
        {
            Clients.All.SendAsync("broadcastMessage", name, message);
        }

        public string SendUserMessage(string messageId, string receiver, string messageContent)
        {
            var sender = Context.User.FindFirstValue(ClaimTypes.NameIdentifier);
            Clients.User(receiver).SendAsync("displayUserMessage", messageId, sender, messageContent);

            //  TODO: Create and add the new message to the storage

            return "Sent";
        }

    public void Echo(string name, string message)
        {
            Clients.Client(Context.ConnectionId).SendAsync("echo", name, message + " (echo from server)");
        }

public void Send(MyMessage message)
{
    // Call the addMessage method on all clients            
    Clients.All.addMessage(message.Msg);
    Clients.Group(message.Group).addMessage("Group Message " + message.Msg);
}



<script src="http://code.jquery.com/jquery-1.8.2.min.js" type="text/javascript"></script>
<script src="Scripts/jquery.signalR-1.0.1.min.js" type="text/javascript"></script>
<!--  If this is an MVC project then use the following -->
<!--  <script src="~/signalr/hubs" type="text/javascript"></script> -->
<script src="signalr/hubs" type="text/javascript"></script>
<script type="text/javascript">
    $(function () {
        // Proxy created on the fly          
        var chat = $.connection.chat;

        // Declare a function on the chat hub so the server can invoke it          
        chat.client.addMessage = function (message) {
            $('#messages').append('<li>' + message + '</li>');
        };

        $.connection.hub.start(function () {
            chat.server.join("RoomA");
        });

        // Start the connection
        $.connection.hub.start().done(function () {

            $("#broadcast").click(function () {
                // Call the chat method on the server
                chat.server.send($('#msg').val());
            });
        });
    });
</script>

  <div>
    <input type="text" id="msg" />
<input type="button" id="broadcast" value="broadcast" />

<ul id="messages">
</ul>
  </div>
    }



//工具 -> 库程序包管理器 -> 程序包管理器控制台 输入下面命令  
//install-package Microsoft.AspNet.SignalR -Version 1.1.4  
using Microsoft.AspNet.SignalR;
using System.Threading.Tasks;
using Microsoft.AspNet.SignalR.Hubs;

namespace SignalR.Controllers
{
    [HubName("ChatRoomHub")]
    public class ChatHub : Hub
    {
        static List<UserEntity> users = new List<UserEntity>();

        /// <summary>
        /// 添加用户
        /// </summary>
        /// <param name="nickName"></param>
        public void UserEnter(string nickName)
        {
            UserEntity userEntity = new UserEntity
            {
                NickName = nickName,
                ConnectionId = Context.ConnectionId
            };

            users.Add(userEntity);
            Clients.All.NotifyUserEnter(nickName, users);//调用前台NotifyUserEnter方法
        }

        /// <summary>
        /// 发送消息
        /// </summary>
        /// <param name="nickName"></param>
        /// <param name="message"></param>
        public void SendMessage(string nickName, string message)
        {
            Clients.All.NotifySendMessage(nickName, message);//调用前台NotifySendMessage方法
        }

        /// <summary>
        /// 断开（刷新页面可以触发此方法）
        /// </summary>
        /// <returns></returns>
        public override Task OnDisconnected()
        {
            var currentUser = users.FirstOrDefault(u => u.ConnectionId == Context.ConnectionId);
            if (currentUser != null)
            {
                users.Remove(currentUser);
                Clients.Others.NotifyUserLeft(currentUser.NickName, users);//调用前台NotifyUserLeft方法
            }
            return base.OnDisconnected();
        }
    }

    public class UserEntity
    {
        public string NickName { get; set; }

        public string ConnectionId { get; set; }
    }


    public class BaseController : Controller
    {
        /// <summary>
        /// 聊天室
        /// </summary>
        /// <returns></returns>
        public ActionResult BroadcastTest()
        {
            return View();
        }
    }
}

