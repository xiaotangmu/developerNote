https://www.cnblogs.com/wyh19941210/p/6682124.html

例子：
struct A
{
    static A()
    {
      Console.WriteLine("I am A.");
    }
    public void Fun()
    {

    }
}
 
class Program
{
  static void Main(string[] args)
  {
  A a=new A();
  a.Fun(); //结构的实例成员被引用Console.Read();
  }
}
结果为：I am A.

结构与类的关系
相同点：
   二者实际上都是创建对象的模板，都可以包含构造函数、常量、字段、方法、属性、索引器和运算符等成员

不同点：
（1）结构是值类型，类是引用类型在内存中结构是存储在栈取的值类型，类是存储在堆区的引用类型

（2）结构和类的构造函数不同，结构中不能包含无参数的构造函数，结构成员会自动初始化为它们默认值

（3）结构不能对实例字段成员进行初始化

（4）结构不能继承，就是一个结构不能从另外一个结构或者类中继承，而且不能作为一个类的继承


在结构声明中，除非字段被声明为 const 或 static，否则无法初始化赋值。 结构类型永远不是抽象的，并且始终是隐式密封的，
因此在结构声明中不允许使用abstract和sealed修饰符。结构不能声明默认构造函数（没有参数的构造函数）或析构函数，
但可以声明带参数的构造函数。 结构可以实现接口，但不能从另一个结构或类继承，而且不能作为一个类的基，
所有结构都直接继承自System.ValueType，后者继承自 System.Object。 结构在赋值时进行复制。 
将结构赋值给新变量时，将复制所有数据，并且对新副本所做的任何修改不会更改原始副本的数据。
 在使用值类型的集合（如 Dictionary<string, myStruct>）时，请务必记住这一点。
 结构类型的变量直接包含了该结构的数据，而类类型的变量所包含的只是对相应数据的一个引用（被引用的数据称为“对象”）。
但是结构仍可以通过ref和out参数引用方式传递给函数成员。 结构可用作可以为 null 的类型，因而可向其赋 null 值。 