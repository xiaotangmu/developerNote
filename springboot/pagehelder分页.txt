来源：https://blog.csdn.net/ztx114/article/details/94615528
	https://blog.csdn.net/u010957645/article/details/88354588?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task

注意写的顺序：先设置Page 参数 再取获取数据 -- 不然不分页
	不能直接给add list -- 不会实现分页 -- 所以redis 分页自己写 利用zset



1、添加pom依赖

 <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper-spring-boot-starter</artifactId>
            <version>1.2.10</version>
 </dependency>

springboot2.0 集成时要使用1.2.x以后版本，项目无法启动

2.application.yml

    pagehelper:
      helper-dialect: mysql #数据库方言
      reasonable: true      #分页合理化
      support-methods-arguments: true #是否支持接口参数来传递分页参数，默认false
      page-size-zero: true #当设置为true的时候，如果pagesize设置为0（或RowBounds的limit=0），就不执行分页，返回全部结果
      params: count=countSql

以下解释均查阅网上资料： 

    helperDialect：分页插件会自动检测当前的数据库链接，自动选择合适的分页方式。 你可以配置helperDialect属性来指定分页插件使用哪种方言。配置时，可以使用下面的缩写值：
    oracle,mysql,mariadb,sqlite,hsqldb,postgresql,db2,sqlserver,informix,h2,sqlserver2012,derby
    特别注意：使用 SqlServer2012 数据库时，需要手动指定为 sqlserver2012，否则会使用 SqlServer2005 的方式进行分页。
    你也可以实现 AbstractHelperDialect，然后配置该属性为实现类的全限定名称即可使用自定义的实现方法。

    offsetAsPageNum：默认值为 false，该参数对使用 RowBounds 作为分页参数时有效。 当该参数设置为 true 时，会将 RowBounds 中的 offset 参数当成 pageNum 使用，可以用页码和页面大小两个参数进行分页。

    rowBoundsWithCount：默认值为false，该参数对使用 RowBounds 作为分页参数时有效。 当该参数设置为true时，使用 RowBounds 分页会进行 count 查询。

    pageSizeZero：默认值为 false，当该参数设置为 true 时，如果 pageSize=0 或者 RowBounds.limit = 0 就会查询出全部的结果（相当于没有执行分页查询，但是返回结果仍然是 Page 类型）。

    reasonable：分页合理化参数，默认值为false。当该参数设置为 true 时，pageNum<=0 时会查询第一页，pageNum>pages（超过总数时），会查询最后一页。默认false 时，直接根据参数进行查询。

    params：为了支持startPage(Object params)方法，增加了该参数来配置参数映射，用于从对象中根据属性名取值， 可以配置 pageNum,pageSize,count,pageSizeZero,reasonable，不配置映射的用默认值， 默认值为pageNum=pageNum;pageSize=pageSize;count=countSql;reasonable=reasonable;pageSizeZero=pageSizeZero。

    supportMethodsArguments：支持通过 Mapper 接口参数来传递分页参数，默认值false，分页插件会从查询方法的参数值中，自动根据上面 params 配置的字段中取值，查找到合适的值时就会自动分页。 使用方法可以参考测试代码中的 com.github.pagehelper.test.basic 包下的 ArgumentsMapTest 和 ArgumentsObjTest。

    autoRuntimeDialect：默认值为 false。设置为 true 时，允许在运行时根据多数据源自动识别对应方言的分页 （不支持自动选择sqlserver2012，只能使用sqlserver）

    closeConn：默认值为 true。当使用运行时动态数据源或没有设置 helperDialect 属性自动获取数据库类型时，会自动获取一个数据库连接， 通过该属性来设置是否关闭获取的这个连接，默认true关闭，设置为 false 后，不会关闭获取的连接，这个参数的设置要根据自己选择的数据源来决定。


3. 演示
	@Service
    public classDemoService {
        @Autowired
        privateDemoMapper demoMapper;
        //当前页 一页多少个  mysql通过limit分页的哈
        public PageInfo<Demo> findDemoList(int pageNum, int pageSize) {
            // 开启分页插件,放在查询语句上面 帮助生成分页语句
            PageHelper.startPage(pageNum, pageSize) //底层实现原理采用改写语句   将下面的方法中的sql语句获取到然后做个拼接 limit  AOPjishu 
            List<Demo> listDemo = demoMapper.findDemoList();
            // 封装分页之后的数据  返回给客户端展示  PageInfo做了一些封装 作为一个类
            PageInfo<Demo> pageInfoDemo = new PageInfo<Demo>(listDemo);
            //所有分页属性都可以冲pageInfoDemo拿到；
            return pageInfoDemo;
}

注意写的顺序：先设置Page 参数 再取获取数据 -- 不然不分页


获取信息
@GetMapping("task")
	public List<Task> taskList(Integer pageNum,Integer pageSize) {
		PageInfo<Task> pageInfo = service.queryTaskAll(pageNum, pageSize);
		List<Task> taskList = pageInfo.getList();
		return taskList;		
	}


