来源：

//整体设置 -- 单任务，多任务，动态生成多任务
https://blog.csdn.net/qq_31673689/article/details/80224711?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2
https://blog.csdn.net/a510750/article/details/90241004 -- 更新暂替

cron表达式
https://www.cnblogs.com/daxiangfei/p/10219706.html



一、添加依赖 -- 版本根据springboot 版本更换

<dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.quartz-scheduler</groupId>
            <artifactId>quartz</artifactId>
            <version>2.2.1</version>
        </dependency>

        <dependency><!-- 该依赖必加，里面有sping对schedule的支持 -->
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
        </dependency>

        <!--必须添加，要不然会出错，项目无法启动-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
            <version>4.3.16.RELEASE</version>
        </dependency>

    </dependencies>

二、相关配置

    由于springboot是无xml配置，所以此处我们采用bean注解的方式实现quartz的配置

@Configuration
public class QuartzConfigration {
    @Bean(name = "jobDetail")
    public MethodInvokingJobDetailFactoryBean detailFactoryBean(SchedulerTask task) {
        // ScheduleTask为需要执行的任务
        MethodInvokingJobDetailFactoryBean jobDetail = new MethodInvokingJobDetailFactoryBean();
        /*
         *  是否并发执行
         *  例如每5s执行一次任务，但是当前任务还没有执行完，就已经过了5s了，
         *  如果此处为true，则下一个任务会bing执行，如果此处为false，则下一个任务会等待上一个任务执行完后，再开始执行
         */
        jobDetail.setConcurrent(true);

        jobDetail.setName("scheduler");// 设置任务的名字
        jobDetail.setGroup("scheduler_group");// 设置任务的分组，这些属性都可以存储在数据库中，在多任务的时候使用

        /*
         * 这两行代码表示执行task对象中的scheduleTest方法。定时执行的逻辑都在scheduleTest。
         */
        jobDetail.setTargetObject(task);

        jobDetail.setTargetMethod("start");
        return jobDetail;
    }

    @Bean(name = "jobTrigger")
    public CronTriggerFactoryBean cronJobTrigger(MethodInvokingJobDetailFactoryBean jobDetail) {
        CronTriggerFactoryBean tigger = new CronTriggerFactoryBean();
        tigger.setJobDetail(jobDetail.getObject());
        tigger.setCronExpression("0/2 * * * * ?");// 表示每隔2秒钟执行一次
        //tigger.set
        tigger.setName("myTigger");// trigger的name
        return tigger;

    }

    @Bean(name = "scheduler")
    public SchedulerFactoryBean schedulerFactory(Trigger cronJobTrigger) {
        SchedulerFactoryBean bean = new SchedulerFactoryBean();
        //设置是否任意一个已定义的Job会覆盖现在的Job。默认为false，即已定义的Job不会覆盖现有的Job。
        bean.setOverwriteExistingJobs(true);
        // 延时启动，应用启动5秒后  ，定时器才开始启动
        bean.setStartupDelay(5);
        // 注册定时触发器
        bean.setTriggers(cronJobTrigger);
        return bean;
    }
    //多任务时的Scheduler，动态设置Trigger。一个SchedulerFactoryBean可能会有多个Trigger
    @Bean(name = "multitaskScheduler")
    public SchedulerFactoryBean schedulerFactoryBean(){
        SchedulerFactoryBean schedulerFactoryBean = new SchedulerFactoryBean();
        return schedulerFactoryBean;
    }
}
    

三、应用场景
1、单任务执行，并且通过控制器的接口实现时间间隔的动态修改
1）新建一个任务SchedulerTask.java

<!--三个注释都要加上-->
@Configuration
@Component
@EnableScheduling
public class SchedulerTask {

    public void start() throws InterruptedException {
        System.out.println("活动开始！！！"+new Date());
    }
}


2）控制器执行

@Controller
public class QuartzController {

    @Resource(name = "jobDetail")
    private JobDetail jobDetail;

    @Resource(name = "scheduler")
    private Scheduler scheduler;

    @Resource(name = "jobTrigger")
    private CronTrigger cronTrigger;


    @ResponseBody
    @GetMapping("/{second}/quart")
    public Object quartzTest(@PathVariable("second")Integer second) throws SchedulerException {
        CronTrigger cron  = (CronTrigger) scheduler.getTrigger(cronTrigger.getKey());
        String currentCron = cron.getCronExpression();// 当前Trigger使用的
        System.err.println("当前trigger使用的-"+currentCron);

        //修改每隔?秒执行任务
        CronScheduleBuilder scheduleBuilder = CronScheduleBuilder.cronSchedule("0/"+second+" * * * * ?");

        // 按新的cronExpression表达式重新构建trigger
        cron = cron.getTriggerBuilder().withIdentity(cronTrigger.getKey())
                .withSchedule(scheduleBuilder).build();

        scheduler.rescheduleJob(cronTrigger.getKey(),cron);

        return "-这是quartz测试！";
    }
}


2、多任务场景
==Part1==

    :新建多个Tast.java，也就是一开始就设定好了任务，我们假设为 伪多任务

1）新建多个任务

public class SchedulerJob1 implements Job {
    @Override
    public void execute(JobExecutionContext jobExecutionContext) throws JobExecutionException {
        System.err.println("这是第一个任务"+new Date());

    }
}


public class SchedulerJob2 implements Job {
    @Override
    public void execute(JobExecutionContext jobExecutionContext) throws JobExecutionException {
        System.err.println("这是第二个任务"+new Date());
    }
}


2）控制器

    通过下面的代码就可以实现两个任务交替执行，但是我们一般的应用场景是不确定的任务和执行时间，请看下一个解决方案

@Controller
public class QuartzController2 {
    @Resource(name = "multitaskScheduler")
    private Scheduler scheduler;

    @ResponseBody
    @RequestMapping("task1")
    public Object task1() throws SchedulerException {
        //配置定时任务对应的Job，这里执行的是ScheduledJob类中定时的方法
        JobDetail jobDetail = JobBuilder.newJob(SchedulerJob1.class).withIdentity("job1", "group1").build();
        CronScheduleBuilder scheduleBuilder = CronScheduleBuilder.cronSchedule("0/3 * * * * ?");
        // 每3s执行一次
        CronTrigger cronTrigger = TriggerBuilder.newTrigger().withIdentity("trigger1", "group1").withSchedule(scheduleBuilder).build();
        scheduler.scheduleJob(jobDetail, cronTrigger);

        return "任务1";
    }

    @ResponseBody
    @RequestMapping("task2")
    public Object task1() throws SchedulerException {
        //配置定时任务对应的Job，这里执行的是ScheduledJob类中定时的方法
        JobDetail jobDetail = JobBuilder.newJob(SchedulerJob2.class).withIdentity("job2", "group1").build();
        CronScheduleBuilder scheduleBuilder = CronScheduleBuilder.cronSchedule("0/6 * * * * ?");
        // 每3s执行一次
        CronTrigger cronTrigger = TriggerBuilder.newTrigger().withIdentity("trigger2", "group1").withSchedule(scheduleBuilder).build();
        scheduler.scheduleJob(jobDetail, cronTrigger);

        return "任务1";
    }
}


==Part2:==

    有时候我们有新建活动之类的场景，这种场景就是活动数目不确定，活动开始时间不确定，所以我们需要用其他的方案来解决！

思路：
主要是通过逻辑代码实现任务开始时间的修改，但是必须要修改任务名称和触发器（trigger）名称的修改，确保多个任务之间名称不一致，否则会报错！

根据任务我们也可以定制使用数据库轮询的方式，确保任务的开启！
主要是为了解决服务器关起和其它因素导致任务终止！

1）任务类

public class SchedulerJob2 implements Job {
    @Override
    public void execute(JobExecutionContext jobExecutionContext) throws JobExecutionException {

        //这里可以获取控制器绑定的值，实际应用中可以设置为某个活动的id,以便进行数据库操作
        Object jobName = jobExecutionContext.getJobDetail().getKey();
        System.err.println("这是"+jobName+"任务"+new Date());
    }
}


2）控制器类

 @ResponseBody
    @RequestMapping("task2/{jobName}")
    public Object task2(@PathVariable(value = "jobName") String jobName) throws SchedulerException {
        //配置定时任务对应的Job，这里执行的是ScheduledJob类中定时的方法
        JobDetail jobDetail = JobBuilder
                .newJob(SchedulerJob2.class)
                .usingJobData("jobName",jobName)
                .withIdentity(jobName, "group1")
                .build();

        CronScheduleBuilder scheduleBuilder = CronScheduleBuilder.cronSchedule("0/2 * * * * ?");
        // 每3s执行一次
        CronTrigger cronTrigger = TriggerBuilder.newTrigger()
                .withIdentity("trigger2"+jobName, "group1")
                .withSchedule(scheduleBuilder)
                .build();

        scheduler.scheduleJob(jobDetail,cronTrigger);

        return jobName;
    }


3）获取所有的在线job

 @ResponseBody
    @RequestMapping("jobs")
    public Object Jobs() throws SchedulerException {

        Set<TriggerKey> triggerKeys = scheduler.getTriggerKeys(GroupMatcher.anyTriggerGroup());

        //获取所有的job集合
        Set<JobKey> jobKeys = scheduler.getJobKeys(GroupMatcher.anyJobGroup());

        //可以在这进行线上任务和数据库任务匹配操作，确保该进行的活动进行活动

        return jobKeys;
    }




//任务替换
@Configuration
public class QuartzScheduler {
 
	@Autowired
	private Scheduler scheduler;
	@Autowired
	private NeTaskService neTaskService;
 
	/**
	 * 开始执行所有任务
	 */
	public void startJob() throws SchedulerException {
		//启动时进行查库将任务添加至job
		
		List<NeTask> netaskList = neTaskService.findAllByNeIdAndInUse();
		List<NeTask> zctaskList = neTaskService.findAllByIpAndInUse();
		
		//添加任务至调度器scheduler
		startJob1(scheduler,netaskList);
		//调度任务开始执行
		//		scheduler.start();
		startJob2(scheduler,zctaskList);
		scheduler.start();
	}
 
	/*
	 * 重启所有任务
	 */
	public void restartJob() throws SchedulerException, InterruptedException {
		//不可以用shutdown，也不需要停止，直接清除，然后启动
		//		scheduler.shutdown();
		//		scheduler.pauseAll();
		scheduler.clear();
		this.startJob();
	}
 
	/**
	 * title:
	 * mentality:
	 * @throws 
	 * @param scheduler2
	 * @param zctaskList
	 */
	private void startJob2(Scheduler scheduler2, List<NeTask> zctaskList) throws SchedulerException{
		// TODO Auto-generated method stub
		
 
	}
 
	/**
	 * title:计划任务1
	 * mentality:
	 * @throws 
	 * @param scheduler2
	 * @param netaskList
	 */
	private void startJob1(Scheduler scheduler2, List<NeTask> netaskList) throws SchedulerException{
		// TODO Auto-generated method stub
		// 通过JobBuilder构建JobDetail实例，JobDetail规定只能是实现Job接口的实例
		// JobDetail 是具体Job实例
		for(NeTask netask : netaskList){
 
			JobDetail jobDetail = JobBuilder.newJob(NeTaskJob.class)//不同的业务，增加不同的.class
					.withIdentity(netask.getId().toString(), netask.getStationId()+netask.getNeId())
					.build();
			jobDetail.getJobDataMap().put("id",netask);
			List<Cron> cronList = CronUtil.getCronByTask(netask);
//			for(Cron cron : cronList ){
			for(int i = 0;i< cronList.size();i++){
				// 基于表达式构建触发器
				CronScheduleBuilder cronScheduleBuilder = CronScheduleBuilder.cronSchedule(
						//下面的cron你可以直接写个cron表达式来做验证,入：每隔5秒执行一次：*/5 * * * * ?
						cronList.get(i).getCron()
						);
 
				// CronTrigger表达式触发器 继承于Trigger
				// TriggerBuilder 用于构建触发器实例
				CronTrigger cronTrigger = TriggerBuilder.newTrigger()
						//若一个jobdetail有多个trigger，则需要注意命名规则，便于后面修改任务
//						.withIdentity(netask.getNeId().toString(), netask.getStationId())
						.forJob(jobDetail)
						.withIdentity(netask.getId() + CronUtil.cronEndId[i], netask.getStationId()+netask.getNeId())
						.withSchedule(cronScheduleBuilder).build();
 
				// scheduleJob该接口的作用是在将任务加入Quartz的同时绑定一个Trigger，Quartz会在加入该任务后自动设置Trigger的JobName与JobGroup为该JobDetail的name与group
				if(i==0){
					scheduler2.scheduleJob(jobDetail, cronTrigger);//第一次必须有jobdetail
				}else{
					scheduler2.scheduleJob(cronTrigger);
				}
				
				
				//rescheduleJob(String, String, Trigger)  替换一个指定的Trigger, 即解除指定Trigger与任务的绑定，并将新的Trigger与任务绑定，Quartz会自动调整新Trigger的JobName与JobGroup，而旧的Trigger将被移除
				//Scheduler#triggerJob(String, String)   创建一个立即触发的Trigger，并将其与name与group指定的任务绑定
			}
 
		}
 
	}
 
 
	/**
	 * 获取Job信息
	 *
	 * @param name
	 * @param group
	 * @return
	 * @throws SchedulerException
	 */
	public String getJobInfo(String name, String group) throws SchedulerException {
		TriggerKey triggerKey = new TriggerKey(name, group);
		CronTrigger cronTrigger = (CronTrigger) scheduler.getTrigger(triggerKey);
		return String.format("time:%s,state:%s", cronTrigger.getCronExpression(),
				scheduler.getTriggerState(triggerKey).name());
	}
 
	/**
	 * 修改某个任务的执行时间
	 * (修改的是具体的trigger，不是jobdetail）
	 * @param name
	 * @param group
	 * @param time
	 * @return
	 * @throws SchedulerException
	 */
	public boolean modifyJob(String name, String group, String time) throws SchedulerException {
		Date date = null;
		TriggerKey triggerKey = new TriggerKey(name, group);
		CronTrigger cronTrigger = (CronTrigger) scheduler.getTrigger(triggerKey);
		String oldTime = cronTrigger.getCronExpression();
		if (!oldTime.equalsIgnoreCase(time)) {
			CronScheduleBuilder cronScheduleBuilder = CronScheduleBuilder.cronSchedule(time);
			CronTrigger trigger = TriggerBuilder.newTrigger().withIdentity(name, group)
					.withSchedule(cronScheduleBuilder).build();
			date = scheduler.rescheduleJob(triggerKey, trigger);
		}
		return date != null;
	}
 
	/**
	 * 暂停所有任务
	 *
	 * @throws SchedulerException
	 */
	public void pauseAllJob() throws SchedulerException {
		scheduler.pauseAll();
	}
 
	/**
	 * 暂停某个任务
	 *
	 * @param name
	 * @param group
	 * @throws SchedulerException
	 */
	public void pauseJob(String name, String group) throws SchedulerException {
		JobKey jobKey = new JobKey(name, group);
		JobDetail jobDetail = scheduler.getJobDetail(jobKey);
		if (jobDetail == null){
			return;
		}
 
		scheduler.pauseJob(jobKey);
	}
 
	/**
	 * 恢复所有任务
	 *
	 * @throws SchedulerException
	 */
	public void resumeAllJob() throws SchedulerException {
		scheduler.resumeAll();
	}
 
	/**
	 * 恢复某个任务
	 *
	 * @param name
	 * @param group
	 * @throws SchedulerException
	 */
	public void resumeJob(String name, String group) throws SchedulerException {
		JobKey jobKey = new JobKey(name, group);
		JobDetail jobDetail = scheduler.getJobDetail(jobKey);
		if (jobDetail == null){
			return;
		}
		scheduler.resumeJob(jobKey);
	}
 
	/**
	 * 删除某个任务
	 *
	 * @param name
	 * @param group
	 * @throws SchedulerException
	 */
	public void deleteJob(String name, String group) throws SchedulerException {
		JobKey jobKey = new JobKey(name, group);
		JobDetail jobDetail = scheduler.getJobDetail(jobKey);
		if (jobDetail == null){
			return;
		}
		scheduler.deleteJob(jobKey);
	}
}



cron 表达式：


Cron表达式是一个字符串，字符串以5或6个空格隔开，分为6或7个域，每一个域代表一个含义，Cron有如下两种语法格式：

　　（1） Seconds Minutes Hours DayofMonth Month DayofWeek Year

　　（2）Seconds Minutes Hours DayofMonth Month DayofWeek

　一、结构

　　corn从左到右（用空格隔开）：秒 分 小时 月份中的日期 月份 星期中的日期 年份

　　二、各字段的含义
  字段 	允许值 	允许的特殊字符
秒（Seconds） 	0~59的整数 	, - * /    四个字符
分（Minutes） 	0~59的整数 	, - * /    四个字符
小时（Hours） 	0~23的整数 	, - * /    四个字符
日期（DayofMonth） 	1~31的整数（但是你需要考虑你月的天数） 	,- * ? / L W C     八个字符
月份（Month） 	1~12的整数或者 JAN-DEC 	, - * /    四个字符
星期（DayofWeek） 	1~7的整数或者 SUN-SAT （1=SUN） 	, - * ? / L C #     八个字符
年(可选，留空)（Year） 	1970~2099 	, - * /    四个字符

 

　　注意事项：

　　每一个域都使用数字，但还可以出现如下特殊字符，它们的含义是：

（1）*：表示匹配该域的任意值。假如在Minutes域使用*, 即表示每分钟都会触发事件。

　　（2）?：只能用在DayofMonth和DayofWeek两个域。它也匹配域的任意值，但实际不会。因为DayofMonth和DayofWeek会相互影响。例如想在每月的20日触发调度，不管20日到底是星期几，则只能使用如下写法： 13 13 15 20 * ?, 其中最后一位只能用？，而不能使用*，如果使用*表示不管星期几都会触发，实际上并不是这样。

　　（3）-：表示范围。例如在Minutes域使用5-20，表示从5分到20分钟每分钟触发一次 

　　（4）/：表示起始时间开始触发，然后每隔固定时间触发一次。例如在Minutes域使用5/20,则意味着5分钟触发一次，而25，45等分别触发一次. 

　　（5）,：表示列出枚举值。例如：在Minutes域使用5,20，则意味着在5和20分每分钟触发一次。 

　　（6）L：表示最后，只能出现在DayofWeek和DayofMonth域。如果在DayofWeek域使用5L,意味着在最后的一个星期四触发。 

　　（7）W:表示有效工作日(周一到周五),只能出现在DayofMonth域，系统将在离指定日期的最近的有效工作日触发事件。例如：在 DayofMonth使用5W，如果5日是星期六，则将在最近的工作日：星期五，即4日触发。如果5日是星期天，则在6日(周一)触发；如果5日在星期一到星期五中的一天，则就在5日触发。另外一点，W的最近寻找不会跨过月份 。

　　（8）LW:这两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五。 

　　（9）#:用于确定每个月第几个星期几，只能出现在DayofMonth域。例如在4#2，表示某月的第二个星期三。

　　三、常用表达式例子

　　（1）0 0 2 1 * ? *   表示在每月的1日的凌晨2点调整任务

　　（2）0 15 10 ? * MON-FRI   表示周一到周五每天上午10:15执行作业

　　（3）0 15 10 ? 6L 2002-2006   表示2002-2006年的每个月的最后一个星期五上午10:15执行作

　　（4）0 0 10,14,16 * * ?   每天上午10点，下午2点，4点 

　　（5）0 0/30 9-17 * * ?   朝九晚五工作时间内每半小时 

　　（6）0 0 12 ? * WED    表示每个星期三中午12点 

　　（7）0 0 12 * * ?   每天中午12点触发 

　　（8）0 15 10 ? * *    每天上午10:15触发 

　　（9）0 15 10 * * ?     每天上午10:15触发 

　　（10）0 15 10 * * ? *    每天上午10:15触发 

　　（11）0 15 10 * * ? 2005    2005年的每天上午10:15触发 

　　（12）0 * 14 * * ?     在每天下午2点到下午2:59期间的每1分钟触发 

　　（13）0 0/5 14 * * ?    在每天下午2点到下午2:55期间的每5分钟触发 

　　（14）0 0/5 14,18 * * ?     在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发 

　　（15）0 0-5 14 * * ?    在每天下午2点到下午2:05期间的每1分钟触发 

　　（16）0 10,44 14 ? 3 WED    每年三月的星期三的下午2:10和2:44触发 

　　（17）0 15 10 ? * MON-FRI    周一至周五的上午10:15触发 

　　（18）0 15 10 15 * ?    每月15日上午10:15触发 

　　（19）0 15 10 L * ?    每月最后一日的上午10:15触发 

　　（20）0 15 10 ? * 6L    每月的最后一个星期五上午10:15触发 

　　（21）0 15 10 ? * 6L 2002-2005   2002年至2005年的每月的最后一个星期五上午10:15触发 

　　（22）0 15 10 ? * 6#3   每月的第三个星期五上午10:15触发

 

　　

　　注：

　　（1）有些子表达式能包含一些范围或列表

　　例如：子表达式（天（星期））可以为 “MON-FRI”，“MON，WED，FRI”，“MON-WED,SAT”

“*”字符代表所有可能的值

　　因此，“*”在子表达式（月）里表示每个月的含义，“*”在子表达式（天（星期））表示星期的每一天


　　“/”字符用来指定数值的增量 
　　例如：在子表达式（分钟）里的“0/15”表示从第0分钟开始，每15分钟 
在子表达式（分钟）里的“3/20”表示从第3分钟开始，每20分钟（它和“3，23，43”）的含义一样


　　“？”字符仅被用于天（月）和天（星期）两个子表达式，表示不指定值 
　　当2个子表达式其中之一被指定了值以后，为了避免冲突，需要将另一个子表达式的值设为“？”

　　“L” 字符仅被用于天（月）和天（星期）两个子表达式，它是单词“last”的缩写 
　　但是它在两个子表达式里的含义是不同的。 
　　在天（月）子表达式中，“L”表示一个月的最后一天 
　　在天（星期）自表达式中，“L”表示一个星期的最后一天，也就是SAT

　　如果在“L”前有具体的内容，它就具有其他的含义了

　　例如：“6L”表示这个月的倒数第６天，“FRIL”表示这个月的最一个星期五 
　　注意：在使用“L”参数时，不要指定列表或范围，因为这会导致问题
